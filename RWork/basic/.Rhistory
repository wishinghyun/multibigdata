num
#R에서 사용하는 주석문
num = 100 #num이 100이다.
num
num <- 1000 #num변수에 1000을 저장하라는 의미미
num <- 1000 #num변수에 1000을 저장하라는 의미
num
num==1000
num==100
num!=1000
num>1000
num>100
num<100
test <- "myR"
test <- myR
myR <- num
test <- myR
test
result <- 100 #숫자형
result1 <- 100 #숫자형
result1
result2 <- "test" #문자형
result2
#R에서 제공되는 함수를 이용할 수 있으며
#
class(result1)
class(result2)
test <- as.character(result1)
test
class(test)
test <- as.numeric(result1)
test
class(test)
# =, <- 같은 것 처럼 보이지만 <- 를 이용해서 변수에 데이터를 할당
a = 100
b <- 100
a
b
sqrt(9)
sqrt(x=9)
x
sqrt(x <- 9)
x
sq
? c
myvector <- c(100,200,300)
myvector
myvector[1]
myvector[2]
myvector[3]
myvector1 <- c(100,200,300)
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1
myvector1 <- c(100,200,300)
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1
myvector1 <- c(100,200,300)
myvector1
myvector1[1]
myvector1[2]
myvector1[3]
myvector2 <- c(10,20,30)
myvector1
myvector2 <- c(10,20,30
myvector2 <- c(10,20,30
)
myvector1
myvector2
myvector1 + 20
myvector1 *2
myvector1 + myvector2
mytext <- c("java","R","hadoop","android")
mytext[1]
mytext + 1
mytext + "1"
mytext[1,2]
mytext[c(1,2)] #벡터의 1번요소와 2번요소만 출력력
mytext[c(1,2)] #벡터의 1번요소와 2번요소만 출력
mytext[c(1,3)]
mytext[1:3]
mytext[c(1:3)]
1:3
1:100
mytext[-1]
mytext[c(-1,-3)]
mytext[c(1,-2,-3)]
mytext[c(-1:-3)]
mytext[-c(1:3)]
#TRUE와 FALSE를 이용해서 작업하기
mytext[c(T,T,F,F)]
mytext[mytext=="java"]
numlist <- 1:100
numlist
numlist %%2==0 #%%가 나머지 구하기
numlist[numlist %%2==0] #짝수구하기
numlist[numlist %%2==1] #홀수구하기
numlist2 <- seq(1,10)
numlist2
? seq
numlist2 <- seq(1,10,by = 2)
numlist2
v1 <- c(70,80,90,100)
names(v1)
names(v1) <- c("국어","수학","영어","자바")
v1
length(v1)
mean(v1)
max(v1)
min(v1) #최소값
#행렬
matrix(1:15)
? matrix
mymat1 <- matrix(1:15,ncol = 3)
mymat1
mymat1 <- matrix(1:15,ncol = 3,byrow = T)
mymat1
#matrix에서 원하는 값을 추출하기
mymat1[2,2] #행 , 열
mymat1[1,3]
mymat1[1,c(1:3)]
mymat1[c(2:3),c(1:2)]
mymat1[1,] #1행의 모든 열 출력
#1행과 3행을 뺀 데이터
mymat1[-c(1,3),]
#1행과 3행만 출력
mymat1[c(1,3),]
###미니실습 1 - 2행부터 4행까지 출력(단, 2 3번 컬럼만)
mymat[c(2:4),c(2,3)]
###미니실습 1 - 2행부터 4행까지 출력(단, 2 3번 컬럼만)
mymat1[c(2:4),c(2,3)]
class(test)
cbind(mymat1,c(1,11,111,1111))
addmymat1 <- cbind(mymat1,c(1,11,111,1111))
addmymat1
addmymat2 <- rbind(mymat2,c(1,11))
addmymat2 <- rbind(mymat1,c(1,11))
addmymat2
#rbind는 row를 추가하는 함수
addmymat2 <- rbind(mymat1,c(1,11,111,1111))
addmymat2
colnames(mymat1) <- c("a","b","c")
mymat1
rownames(mymat1) <- c("r1","r2","r3","r4","r5")
mymat1
mean(mymat1)
m1 <- (80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90)
m1 <- c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90)
data <- m1
m1 <- data(1:16,ncol=4)
matrix(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90)
matrix1(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90)
m1
m1 <- c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90,ncol=4)
m1
data
m1
data
m1 <- matrix(c(80,90,70,100,80,99,78,72,90,78,82,78,99,89,78,90),ncol = 4,byrow = T)
m1
colnames(m1) <- c("국어","영어","과학","수학")
rownames(m1) <- c("kim","lee","hong","jang")
m1
mean(m1[c(1:4),])
mean(m1[1,])
mean(m1[1,])
mean(m1[2,])
mean(m1[3,])
mean(m1[4,])
mean(m1[,1])
mean(m1[,2])
mean(m1[,3])
mean(m1[,4])
avg_name <- matrix(c(mean(m1[1,]),mean(m1[2,]),mean(m1[3,]),mean(m1[4,])),ncol = 4,byrow = T)
avg_name
rownames(avg_name) <- "평균"
avg_name
colnames(avg_name) <- c("국어","영어","과학","수학")
avg_name
rownames(avg_name) <- "사람별
colnames(avg_name) <- c("kim","lee","hong","jang")
rownames(avg_name) <- "사람별
colnames(avg_name) <- c("kim","lee","hong","jang")
colnames(avg_name) <- c("kim","lee","hong","jang")
avg_name
rownames(avg_name) <- "사람별
colnames(avg_name) <- c("kim","lee","hong","jang")
colnames(avg_name) <- c("kim","lee","hong","jang")
avg_subject <- matrix(c(mean(m1[,1]),mean(m1[,2]),mean(m1[,3]),mean(m1[,4])),ncol = 4,byrow = T)
rownames(avg_name) <- "사람별
colnames(avg_name) <- c("kim","lee","hong","jang")
colnames(avg_name) <- c("kim","lee","hong","jang")
avg_subject <- matrix(c(mean(m1[,1]),mean(m1[,2]),mean(m1[,3]),mean(m1[,4])),ncol = 4,byrow = T)
avg_subject
rownames(avg_subject) <- "평균"
colnames(avg_subject) <- c("국어","영어","과학","수학")
avg_subject
avg_name
m1
dataframeMat1 <- matrix(1:15,ncol = 3,byrow = T)
dataframeMat1
dataframeMat2 <- data.frame(dataframeMat1)
dataframeMat2
mydataframe <- data.frame(dataframeMat1)
mydataframe
dataframeMat1[,1]
mydataframe[,1]
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
as.character(dataframeMat1[,1])
#matrix로 정의된 데이터를 dataframe으로 변경하여 작업하는 경우가 많음
#matrix의 1열만 char타입으로 변경
dataframeMat1[,1] <- as.character(dataframeMat1[,1])
dataframeMat1
#str함수는 dataframe내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
mydataframe[,1] <- as.character(mydataframe[,1])
#str함수는 dataframe내부의 데이터형을 볼 수 있는 함수
str(mydataframe)
mydataframe
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다
mydataframe$X2
mydataframe$X3
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
mydataframe$X4 <- col4
mydataframe
#필요한 곳에서 dataframe을 다시 matrix로 변환
dataframeMat2 <- as.matrix(mydataframe)
dataframeMat2
#dataframe만들기 - matrix를 dataframe으로 변환
#벡터를 여러 개 만들어서 dataframe을 작성
eng <- c(100,99,90)
math <- c(100,99,100)
mydf1 <- data.frame(eng,math)
mydfq
mydf1
mean(mydf1$eng)
mean(mydf1$math)
#3. dataframe을 직접 정의하는 방법
mydf2 <- data.frame(eng=c(100,100,100),m=c(90,90,90))
mydf2
#
m <- matrix(1:15,ncol = 3,byrow = T)
m
d <- data.frame(m)
d
t(m)
m
#생성이 완료되어 사용중인 matrix, dataframe의 행과 열을 변경
m <- matrix(1:15,ncol = 3,byrow = T)
m
m <- t(m)
m
d <- data.frame(m)
d
d <- t(d)
d
fruit <- data.frame("제품"=c("사과","딸기","수박"),"가격"=c(1800,1500,3000),"판매량"=c(24,38,13))
fruit
fruit <- data.frame("제품"=c("사과","딸기","수박"),"가격"=c(1800,1500,3000),"판매량"=c(24,38,13))
fruit
avg_price <- mean(fruit[,2])
avg_price
avg_fruit <- data.frame("제품"=c("사과","딸기","수박"),"가격평균"=mean(fruit[,2]),"판매량평균"=c(mean(fruit[,3])))
avg_fruit
avg_fruit <- data.frame("평균"=c("과일"),"가격평균"=mean(fruit[,2]),"판매량평균"=c(mean(fruit[,3])))
avg_fruit
avg_fruit <- data.frame(c("과일"),"가격평균"=mean(fruit[,2]),"판매량평균"=c(mean(fruit[,3])))
avg_fruit
avg_fruit <- data.frame("평균"=c("과일"),"가격평균"=mean(fruit[,2]),"판매량평균"=c(mean(fruit[,3])))
avg_fruit
avg_fruit <- data.frame("평균"=c("과일"),"가격평균"=mean(fruit[,2]),"판매량평균"=c(mean(fruit[,3])))
avg_fruit
num <- 88
if(num>=90){
print("합격")
}else{
print("다시")
}
if(num>=90){
print("수")
}else if(num>=80){
print("우")
}else{
print("다시")
}
myv <- c(1:10)
myv <- c(1:10)
for (i in myv) {
i
}
myv <- c(1:10)
for (i in myv) {
print(i)
}
sum <- 0;
for (i in myv) {
sum = sum + i
}
print(sum)
#1부터 10까지 합 구하기 - ver2
myv2 <- c(1:100)
sum(myv2)
#csv는 기본 패키지로 사용가능
#csv를 읽기
mdf = read.csv("csv_exam.csv")
mdf
mdf[2,2]
mdf[2,]
#dataframe에서 조건에 만족하는 데이터를 조회
m <- matrix(1:20,ncol = 4)
m
d <- data.frame(m)
d
myresult <- d[d$X3>=13,]
myresult
#조건에 만족하는 데이터를 result.csv로 저장
write.csv(myresult,file = "result.csv")
science <- mdf[mdf$science>=80]
science <- mdf[mdf$science>=80,]
science
science
total <- c((mean(science[1,3:5])),(mean(science[2,3:5])),(mean(science[3,3:5])),(mean(science[4,3:5])))
total <- c((mean(science[1,(3:5)])),(mean(science[2,(3:5)])),(mean(science[3,(3:5)])),(mean(science[4,(3:5)])))
total <- c((mean(science[1,c(3:5)])),(mean(science[2,c(3:5)])),(mean(science[3,c(3:5)])),(mean(science[4,c(3:5)])))
total
science
total <- martix(c((mean(science[1,c(3:5)])),(mean(science[2,c(3:5)])),(mean(science[3,c(3:5)])),(mean(science[4,c(3:5)]))))
total
total <- c((mean(science[1,c(3:5)])),(mean(science[2,c(3:5)])),(mean(science[3,c(3:5)])),(mean(science[4,c(3:5)])))
avg_exam <- c(mean(science[1,(3:5)]),mean(science[2,c(3:5)]),mean(science[3,c(3:5)]),mean(science[4,c(3:5)]))
total <- c(sum(science[1,(3:5)]),sum(science[2,(3:5)]),sum(science[3,(3:5)]),sum(science[4,(3:5)]))
total
science$mytotal <- total
science
total <- c(sum(science[1,(3:5)]),sum(science[2,(3:5)]),sum(science[3,(3:5)]),sum(science[4,(3:5)]))
total
science$mytotal <- total
science
avg_exam <- c(mean(science[1,(3:5)]),mean(science[2,(3:5)]),mean(science[3,(3:5)]),mean(science[4,(3:5)]))
avg_exam
avg_exam <- c(mean(science[1,3],science[1,4],science[1,5]),mean(science[2,3],science[2,4],science[2,5]),mean(science[3,3],science[3,4],science[3,5]),mean(science[4,3],science[4,4],science[4,5]))
avg_exam
avg_exam <- c(mean(science[1,3],science[1,4],science[1,5]),mean(science[2,3],science[2,4],science[2,5]),mean(science[3,3],science[3,4],science[3,5]),mean(science[4,3],science[4,4],science[4,5]))
avg_exam
science$myavg <- avg_exam
science
write.csv(science,file = "csv_exam_result.csv")
avg_exam <- c(mean(science[1,(3:5)]),mean(science[2,(3:5)]),mean(science[3,(3:5)]),mean(science[4,(3:5)]))
avg_exam <- c(mean(sum(science[1,(3:5)]),mean(sum(science[2,(3:5)])),mean(sum(science[3,(3:5)])),mean(sum(science[4,(3:5)]))))
avg_exam
avg_exam <- c(mean(science[1,3],science[1,4],science[1,5]),mean(science[2,3],science[2,4],science[2,5]),mean(science[3,3],science[3,4],science[3,5]),mean(science[4,3],science[4,4],science[4,5]))
avg_exam
avg_exam <- c(mean(sum(science[1,(3:5)])),mean(sum(science[2,(3:5)])),mean(sum(science[3,(3:5)])),mean(sum(science[4,(3:5)])))
avg_exam
avg_exam <- c(mean(science[1,(3:5)]),mean(science[2,(3:5)]),mean(science[3,(3:5)]),mean(science[4,(3:5)]))
science
avg_exam <- c(mean(science[1,3],science[1,4],science[1,5]),mean(science[2,3],science[2,4],science[2,5]),mean(science[3,3],science[3,4],science[3,5]),mean(science[4,3],science[4,4],science[4,5]))
science$myavg <- avg_exam
science
avg_exam
avg_exam <- c(mean(science[1,3],science[1,4],science[1,5]),mean(science[2,3],science[2,4],science[2,5]),mean(science[3,3],science[3,4],science[3,5]),mean(science[4,3],science[4,4],science[4,5]))
avg_exam
science[1,3]
science[1,4]
avg_exam <- matrix(c(mean(science[1,(3:5)]),mean(science[2,(3:5)]),mean(science[3,(3:5)]),mean(science[4,(3:5)])),ncol = 1)
for (i in sum(science[,3:5])) {
print(i)
}
x <- 1
total
for (i in total) {
print(i)
}
for (i in total) {
print(t(i))
}
for (i in total) {
print(i)
}
avg_exam <- c(mean(science[1,(3:5)]),mean(science[2,(3:5)]),mean(science[3,(3:5)]),mean(science[4,(3:5)]))
avg_exam <- c(science$mytotal[1]/3,science$mytotal[2]/3,science$mytotal[3]/3,science$mytotal[4]/3)
avg_exam
science$myavg <- avg_exam
science
write.csv(science,file = "csv_exam_result.csv")
length(science[,(3:5)])
x <- 1
x <- 1
for (i in science$mytotal[x]/length(science[,(3:5)])) {
x = x + 1
}
mydata <- read.csv("csv_exam.csv")
mydata
mydata <- read.csv("csv_exam.csv")
mydata
mydataResult <- mydata[mydata$science>=80,]
mydataResult
dataframeMat1 <- matrix(1:15,ncol = 3,byrow = T)
dataframeMat1
mydataframe <- data.frame(dataframeMat1)
mydataframe
mydataframe$X1 #$를 이용해서 열의 이름을 접근할 수 있다
mydataframe$X2
mydataframe$X3
#dataframe에 열을 추가
col4 <- c(1,1,1,1,1)
mydataframe$X4 <- col4
mydataframe
mydataResult$mytotal <- as.numeric(mydataResult$math+mydataResult$english+mydataResult$science)
mydataResult
mydataResult <- mydata[mydata$science>=60,]
mydataResult
mydataResult$mytotal <- as.numeric(mydataResult$math+mydataResult$english+mydataResult$science)
mydataResult
mydataResult <- mydata[mydata$science>=80,]
mydataResult
mydataResult$mytotal <- as.numeric(mydataResult$math+mydataResult$english+mydataResult$science)
mydataResult
mydataResult$myavg <- as.numeric(mydataResult$mytotal/3)
mydataResult
write.csv(mydataResult,file = "result2.csv")
