install.packages("splitstackshape")
library("splitstackshape")
dfcsv2 <- cSplit(indt = dfcsv,
splitCols = "mydata",
sep = ",")
dfcsv2
class(dfcsv2)
#타입 변경
#as의 함수들을 이용해서 변경 as는 ~~~가 아닌 것을 ~~~로 변경
# - data.table과 data.frame의 속성을 가지고 있는 dfcvs2를 dataframe으로 변경
dfcsv2 <- as.data.frame(dfcsv2)
class(dfcsv2)
class(dfcsv2$num)
class(dfcsv2$mydata_1)
class(dfcsv2$mydata_2)
class(dfcsv2$mydata_3)
class(dfcsv2$mydata_4)
class(dfcsv2$mydata_5)
class("dd")
str(dfcsv2)
for (i in 2:ncol(dfcsv2)) {
dfcsv2[,i] = as.character(dfcsv2[,i])
}
str(dfcsv2) #전체 데이터의 구조를 확인
####tsv파일 읽기####
#tab으로 구분된 파일(\t)
df3 <- read.delim("02_tsv.txt",sep = "\t")
head(df3)
####xml파일 읽기####
install.packages("XML")
library("XML")
?xmlTreeParse
dfxml = xmlTreeParse("03_xml.xml")
dfxml
xmlRoot(dfxml)
dfxml <-  xmlTreeParse("03_xml.xml")
dfxml
dfxml <- xmlRoot(dfxml)
dfxml
dfxml <- xmlSApply(dfxml,function(x){
xmlSApply(x,xvalue)
})
dfxml
dfxml <- xmlSApply(dfxml,function(x){
xmlSApply(x,xmlvalue)
})
dfxml <- xmlSApply(dfxml,function(x){
xmlSApply(x,xmlValue)
})
dfxml
dfxml <- data.frame(t(dfxml),row.names = NULL)
dfxml
####xlsx파일 읽기####
install.packages("readxl")
library("readxl")
dfxlsx
dfxlsx <- read_xlsx("07_xlsx.xlsx")
dfxlsx
exam <- read.csv("csv_exam.csv")
exam
#전체 레코드의 맨 위에서부터 정의한 갯수만큼 가져오기
head(exam,n = 5)
tail(exam)
tail(exam,5)
#실제 뷰어로 보기
view(exam)
#실제 뷰어로 보기
View(exam)
mpg <- as.data.frame(data("mpg"))
nrow(mpg)
nrow(exam)
#컬럼의 갯수
ncol(exam)
#행과 열의 갯수
dim(exam)
#타입확인
class(exam)
#구조확인
str(exam)
#데이터에 대한 요약정보
summary(exam)
exam
#컬럼의 이름을 변경 - dplyr
install.packages("dplyr")
library("dplyr")
#rename(data, 변경할 컬럼명=기존 컬럼명)
exam <- rename(exam, eng=english)
exam
#ggplot2패키지에서 제공되는 mpg데이터를 분석
####step1. mpg를 dataframe으로 변경####
mpg <- as.data.frame(mpg)
mpg
mpg
library("ggplot2")
mpg
mpg <- read.csv("ggplot2")
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
mpg <- as.data.frame(mpg)
nrow(mpg)
mpg
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
mpg <- as.data.frame(mpg)
mpg
View(mpg)
remove.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library("ggplot2")
mpg
mpg <- as.data.frame(mpg)
mpg
####step2. mpg의 정보를 출력####
# 행 갯수, 열의 갯수, 위에서 10개, 끝에서 10개 출력
nrow(mpg)
ncol(mpg)
head(mpg,10)
tail(mpg,10)
library("dplyr")
####step3. mpg의 컬럼명을 변경####
# cty => city, hwy => highway
mpg <- rename(mpg, city=cty)
mpg <- rename(mpg, highway=hwy)
mpg
for (i in 2:ncol(mpg)) {
mpg[mpg$total,i] = as.character(mpg[mpg$city,i]+mpg[mpg$highway,i])
}
str(mpg)
for (i in 2:ncol(mpg)) {
mpg[mpg$total,i] = as.integer(mpg[mpg$city,i]+mpg[mpg$highway,i])
}
for (i in 2:ncol(mpg)) {
mpg[mpg$total,i] = as.integer((mpg[mpg$city,i]+mpg[mpg$highway,i]))
}
for (i in 2:ncol(mpg)) {
mpg[mpg$total,i] = (mpg[mpg$city,i]+mpg[mpg$highway,i])
}
for (i in 2:ncol(mpg)) {
mpg[mpg$total,i] = mpg[mpg$city,i]+mpg[mpg$highway,i]
}
####step4. 파생변수 생성하기####
# total컬럼 추가 => city와 highway의 합
# avg컬럼 추가 => city와 highway의 평균
mpg$total <- mpg$city+mpg$highway
mpg$avg <- (mpg$city+mpg$highway)/2
mpg
summary(mpg)
str(mpg)
sample(1:10)
a <- sample(1:10)
a
a <- sample(1:10,size = 5)
a
a <- sample(1:10,size = 5)
a
a <- sample(1:10,size = 3,replace = FALSE)
a
a <- sample(1:10,size = 3,replace = FALSE)
a
a <- sample(1:10,size = 3,replace = TRUE)
a
a <- sample(1:10,size = 3,replace = TRUE)
a
a <- sample(1:10)
a
a <- sample(1:10)
a
a <- sample(1:10,size = 3,replace = FALSE)
a
a
a <- sample(1:10,size = 3,replace = FALSE)
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 3,replace = FALSE)
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 3,replace = FALSE)
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 3,replace = FALSE)
a
set.seed(1222) #1222는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(121) #숫자는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(121) #숫자는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
set.seed(1222) #숫자는 key
a <- sample(1:10,size = 5,replace = FALSE)
a
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
#if문의 역할을 하는 함수 - ifelse
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata"),
size = 6,
replace = TRUE))
ifdf
for (i in 1:nrow(ifdf)) {
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
ifdf
set.seed(1221)
ifdf <- data.frame(mynum=1:6,
myval=sample(c("spring","bigdata","android"),
size = 6,
replace = TRUE))
ifdf
#myval의 값이 spring이면 프로젝트 완료, bigdata이면 할꺼야 출력
for (i in 1:nrow(ifdf)) {
if(ifdf[i,"myval"]=="spring"){
ifdf[i,"info"] <- "프로젝트 완료"
}else{
ifdf[i,"info"] <- "할꺼야"
}
}
ifdf
#함수를 이용해서 - info2
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
ifdf
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = ifelse(test = ifdf$myval=="bigdata",
yes = "머신셋팅",
no = "device셋팅완료"))
ifdf
ifdf[,"info2"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = "할꺼다")
#조건이 두 개 이상인 경우 처리
ifdf[,"info3"] <- ifelse(test = ifdf$myval=="spring",
yes = "쉽다",
no = ifelse(test = ifdf$myval=="bigdata",
yes = "머신셋팅",
no = "device셋팅완료"))
ifdf
ifdf[,"info4"] <- "쉽다"
ifdf
mpg[,"info"] <- ifelse(test = mpg$total>=20,
yes = "pass",
no = "fail")
mpg
mpg[,"info"] <- ifelse(test = mpg$total>=30,
yes = "pass",
no = "fail")
mpg[,"grade"] <- ifelse(test = mpg$total>=40,
yes = "A",
no = ifelse(test = mpg$total>=35,
yes = "B",
no = ifelse(test = mpg$total>=30,
yes = "C",
no = "D")))
mpg
exam
#rename(data, 변경할 컬럼명=기존 컬럼명)
exam <- rename(exam, eng=english)
exam <- read.csv("csv_exam.csv")
#rename(data, 변경할 컬럼명=기존 컬럼명)
exam <- rename(exam, eng=english)
exam
table(exam$eng)
qplot(exam$eng)
library("ggplot2")
midwest <- as.data.frame(midwest)
head(midwest)
library("dplyr")
midwest <- rename(midwest, total=poptotal)
midwest <- rename(midwest, asian=popasian)
midwest$"전체 인구 대비 아시아 인구 백분율" <- midwest$asian/midwest$total
summary(midwest$`전체 인구 대비 아시아 인구 백분율`)
summary(midwest$"전체 인구 대비 아시아 인구 백분율")
midwest[,"아시아 인구 비율"] <- ifelse(test = midwest$"전체 인구 대비 아시아 인구 백분율">0.004872,
yes = "large",
no = "small")
midwest
table(midwest$"아시아 인구 비율")
qplot(midwest$"아시아 인구 비율")
qplot(data = midwest, x = midwest$area, y = midwest$"아시아 인구 비율")
qplot(data = midwest, x = midwest$"아시아 인구 비율", y = midwest$area)
qplot(data = midwest, x = midwest$area, y = midwest$"아시아 인구 비율", geom = "line" )
midwest
qplot(data = midwest, x = midwest$area, y = midwest$"전체 인구 대비 아시아 인구 백분율", geom = "line" )
qplot(data = midwest, x = midwest$area, y = midwest$"전체 인구 대비 아시아 인구 백분율", geom = "boxplot" )
qplot(data = midwest, x = midwest$area, y = midwest$"전체 인구 대비 아시아 인구 백분율")
qplot(data = midwest, x = midwest$area, y = midwest$"아시아 인구 비율", geom = "line" )
qplot(data = midwest, x = midwest$area, y = midwest$"아시아 인구 비율" )
qplot(data = midwest, x = midwest$"아시아 인구 비율" )
class(num)
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num = 10
class(num)
#수치형 변수
#정수 - integer(int), R에서 다루는 모든 숫자 - numeric
num1 = 10
class(num1)
num2 = 10L
class(num2)
result <- num1+num2
result
class(result)
data(package = "MASS") #R내부의 샘플데이터셋을 가져오기
library(MASS)
data("Boston")
head(Boston)
colnames(Boston)
t(colnames(Boston))
t(t(colnames(Boston)))
df <- head(Boston[,1:7])
df
#반복작업을 할 때 사용할 수 있도록 함수를 지원
#margin = 1 => 행방향, margin = 2 => 열방향
df[,"total"] <- apply(X = df,MARGIN = 1,FUN = "sum")
df
df[,"avg"] <- apply(X = df,MARGIN = 1,FUN = "mean")
df
apply(X = df,MARGIN = 2,FUN = "sum")
apply(X = df,MARGIN = 2,FUN = "mean")
round(apply(X = df,MARGIN = 2,FUN = "sum"),4)
round(apply(X = df,MARGIN = 2,FUN = "mean"),4)
#apply의 margin속성을 2로 정의
sapply(X = df,FUN = "mean")
#주어진 데이터에서 원하는 데이터만 추출
library("dplyr")
data("airquality")
library("dplyr")
data("airquality")
head(airquality)
df2 <- airquality
df2
#필터링 - 벡터연산
df2[,1:4]
#필터링 - 벡터연산
head(df2[,1:4])
df2_data1
df2_data1 <- df2[1:5,]
df2_data1
df2[df2$Day==1]
df2[df2$Day==1,]
df2$Day==1
df2[df2$Day!=1,]
df2[df2$Day<=2,]
df2[df2$Day==1 & df2$Day==2,]
df2[df2$Day==1 | df2$Day==2,]
df2$Day %in% 1:2
sum(df2$Day %in% 1:2)
df2_data2 = df2[df2$Day %in% 1:2,]
nrow(df2_data2)
#dplyr패키지에서 지원하는 필터관련 함수
filter(df2,Day==1 & Month==5)
filter(df2,Day %in% c(1,3,5))
exam <- read.csv("csv_exam.csv")
exam
exam %>% filter(class==1)
exam %>%
filter(class==1) %>%
filter(math>=50)
#select
exam %>% select(-math)
#arrange
exam %>% arrange(id)
exam %>% arrange(desc(id))
exam %>% select(id,math,eng)
exam %>% select(id,math,english)
exam %>%
filter(class==1) %>%
select(id,math,science)
exam %>% arrange(class)
exam %>% arrange(class,english)
exam %>% arrange(class,desc(english))
#mutate : 파생변수 추가하기 (원본에 없는 컬럼 추가)
exam %>%
mutate(total=math+english+science) %>%
head()
exam %>%
mutate(total=math+english+science,
mean=total/3) %>%
head()
exam %>%
mutate(total=math+english+science,
mean=total/3,
info=ifelse(science>70,"통과","재시험"))
exam %>%
group_by(class)
#group_by
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
test1 <- data.frame(id = c(1,2,3,4,5),
mid_jumsu = c(77,56,99,100,99))
test2 <- data.frame(id = c(1,2,3,4,5),
mid_jumsu = c(77,56,99,100,99))
test1
test2
test2 <- data.frame(id = c(1,2,3,4,5),
final_jumsu = c(77,56,99,100,99))
test2
final_data <- left_join(test1,test2,by = "id")
final_data
namedata <- data.frame(class = c(1,2,3,4,5),
teacher = c("kim","lee","park","jang","hong"))
str(namedata)
str(namedata)
namedata <- data.frame(class = c(1,2,3,4,5),
teacher = c("kim","lee","park","jang","hong"),
stringsAsFactors = F)
str(namedata)
exam_new <- left_join(exam,namedata,by="class")
exam_new
groupA <- data.frame(id = c(1,2,3,4,5),
mid_jumsu = c(77,56,99,100,99))
groupB <- data.frame(id = c(6,7,8,9,10),
mid_jumsu = c(77,56,99,100,99))
group_total <- bind_rows(groupA,groupB)
group_total
library("dplyr")
mpg
head(mpg)
#group_by
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
#Q1 class별 cty평균
mpg %>%
group_by(class) %>%
summarise(cty_mean = mean(cty))
#Q1 class별 cty평균
mpg %>%
group_by(class) %>%
summarise(city_mean = mean(city))
#Q2 city 평균 높은 순서대로 정렬
mpg %>%
group_by(class) %>%
summarise(city_mean = mean(city) %>%
arrange(desc(city)))
#Q2 city 평균 높은 순서대로 정렬
mpg %>%
group_by(class) %>%
summarise(city_mean = mean(city) %>%
arrange(desc(city_mean)))
#Q2 city 평균 높은 순서대로 정렬
mpg %>%
group_by(class) %>%
summarise(city_mean = mean(city)) %>%
arrange(desc(city_mean))
#Q3 highway평균이 높은 회사 3곳
mpg %>%
group_by(manufacturer) %>%
summarise(highway_mean = mean(highway)) %>%
arrange(desc(highway_mean)) %>%
head(3)
#Q4 회사별 compact차종 수 내림차순
mpg %>%
group_by(manufacturer) %>%
summarise(compact_count = n())
#Q4 회사별 compact차종 수 내림차순
mpg %>%
filter(manufacturer=="compact") %>%
summarise(compact_count = n())
#Q4 회사별 compact차종 수 내림차순
mpg %>%
filter(manufacturer=="compact") %>%
group_by(manufacturer) %>%
summarise(compact_count = n())
#Q4 회사별 compact차종 수 내림차순
mpg %>%
filter(class=="compact") %>%
group_by(manufacturer) %>%
summarise(compact_count = n())
#Q4 회사별 compact차종 수 내림차순
mpg %>%
filter(class=="compact") %>%
group_by(manufacturer) %>%
summarise(compact_count = n()) %>%
arrange(desc(compact_count))
#group_by
exam %>%
group_by(class) %>%
summarise(math_sum = sum(math),
math_mean = mean(math),
math_median = median(math),
math_count = n())
